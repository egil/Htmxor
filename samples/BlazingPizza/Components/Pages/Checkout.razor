@page "/checkout"
@inject PizzaClient PizzaClient
@inject OrdersClient OrdersClient
@inject NavigationManager NavigationManager

<PageTitle>Blazing Pizza - Checkout</PageTitle>

<div class="container-fluid p-3">
    <EditForm Model=@Address OnValidSubmit="PlaceOrder" OnInvalidSubmit=InvalidOrder FormName="address-form">
        <div class="row">
            <div class="col p-3 m-3 border">
                <h4>Review order</h4>
                <OrderReview Order=@order />
                @for (var i = 0; i < order.Pizzas.Count; i++)
                {
                    var pizza = @order.Pizzas[i];
                    <input type="hidden" name="OrderForm.Pizzas[@(i)].SpecialId" value="@pizza.SpecialId" />
                    <input type="hidden" name="OrderForm.Pizzas[@(i)].Size" value="@pizza.Size" />
                    foreach (var topping in pizza.Toppings)
                    {
                        <input type="hidden" name="OrderForm.Pizzas[@(i)].Toppings" value="@topping.ToppingId" />
                    }
                }
            </div>
            <div class="col p-3 m-3 border">
                <h4>Deliver to...</h4>
                <AddressEditor Address=@Address />                
            </div>
        </div>
        <div class="text-center">
            <button type="submit" class="btn btn-warning" hx-target="#main" hx-post="/checkout" hx-disabled-elt="this">
                Place order
            </button>
        </div>
    </EditForm>
</div>

@code {
    private IReadOnlyList<PizzaSpecial> specials = [];
    private List<Topping> toppings = [];
    private Order order = new();

    [SupplyParameterFromForm]
    public Address? Address { get; set; }

    [SupplyParameterFromForm]
    private OrderFormData? OrderForm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Address ??= new Address();

        specials = await PizzaClient.GetSpecials();
        toppings = await PizzaClient.GetToppings();

        foreach (var special in OrderForm?.Pizzas ?? Enumerable.Empty<ConfigurePizzaFormData>())
        {
            AddPizza(special);
        }
    }

    private void AddPizza(ConfigurePizzaFormData form)
    {
        order.Pizzas.Add(new Pizza
            {
                Id = order.Pizzas.Count + 1,
                Size = form.Size,
                SpecialId = form.SpecialId,
                Special = specials.Single(x => x.Id == form.SpecialId),
                Toppings = form.Toppings?.Select(toppingId => new PizzaTopping
                {
                    ToppingId = toppingId,
                    Topping = toppings.Single(x => x.Id == toppingId)
                }).ToList() ?? [],
            });
    }

    private async Task InvalidOrder()
    {

    }


    private async Task CheckOrder()
    {
        
    }

    private async Task PlaceOrder()
    {
        var newOrderId = await OrdersClient.PlaceOrder(order);
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }
}
